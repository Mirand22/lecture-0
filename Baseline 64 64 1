{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "54409826",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:22.415976Z",
     "iopub.status.busy": "2022-05-23T11:02:22.415235Z",
     "iopub.status.idle": "2022-05-23T11:02:22.426317Z",
     "shell.execute_reply": "2022-05-23T11:02:22.425135Z"
    },
    "papermill": {
     "duration": 0.041152,
     "end_time": "2022-05-23T11:02:22.428598",
     "exception": false,
     "start_time": "2022-05-23T11:02:22.387446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c509e0b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:22.481048Z",
     "iopub.status.busy": "2022-05-23T11:02:22.480574Z",
     "iopub.status.idle": "2022-05-23T11:02:22.839166Z",
     "shell.execute_reply": "2022-05-23T11:02:22.838369Z"
    },
    "papermill": {
     "duration": 0.38732,
     "end_time": "2022-05-23T11:02:22.841362",
     "exception": false,
     "start_time": "2022-05-23T11:02:22.454042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dataframe=pd.read_csv(\"../input/data-ma/ADJcsv.csv\", usecols=[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35f632ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:22.892878Z",
     "iopub.status.busy": "2022-05-23T11:02:22.892505Z",
     "iopub.status.idle": "2022-05-23T11:02:30.486272Z",
     "shell.execute_reply": "2022-05-23T11:02:30.485226Z"
    },
    "papermill": {
     "duration": 7.622225,
     "end_time": "2022-05-23T11:02:30.488543",
     "exception": false,
     "start_time": "2022-05-23T11:02:22.866318",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from pandas import read_csv\n",
    "import math\n",
    "import pandas as pd\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from keras.callbacks import EarlyStopping\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "75716f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.540805Z",
     "iopub.status.busy": "2022-05-23T11:02:30.540241Z",
     "iopub.status.idle": "2022-05-23T11:02:30.559796Z",
     "shell.execute_reply": "2022-05-23T11:02:30.559093Z"
    },
    "papermill": {
     "duration": 0.047741,
     "end_time": "2022-05-23T11:02:30.561499",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.513758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>monitored_ns=4;s=OPC_IX_Durchflusssensor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.147375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.294749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.442124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.589498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   monitored_ns=4;s=OPC_IX_Durchflusssensor\n",
       "0                                  0.000000\n",
       "1                                  0.147375\n",
       "2                                  0.294749\n",
       "3                                  0.442124\n",
       "4                                  0.589498"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataframe.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "10f83165",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.598654Z",
     "iopub.status.busy": "2022-05-23T11:02:30.598190Z",
     "iopub.status.idle": "2022-05-23T11:02:30.603127Z",
     "shell.execute_reply": "2022-05-23T11:02:30.602246Z"
    },
    "papermill": {
     "duration": 0.025114,
     "end_time": "2022-05-23T11:02:30.604894",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.579780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Convert pandas dataframe to numpy array\n",
    "dataset = dataframe.values\n",
    "dataset = dataset.astype('float32') #Convert values to float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0401be4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.641060Z",
     "iopub.status.busy": "2022-05-23T11:02:30.640737Z",
     "iopub.status.idle": "2022-05-23T11:02:30.649493Z",
     "shell.execute_reply": "2022-05-23T11:02:30.648352Z"
    },
    "papermill": {
     "duration": 0.029542,
     "end_time": "2022-05-23T11:02:30.651973",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.622431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#LSTM uses sigmoid and tanh that are sensitive to magnitude so values need to be normalized\n",
    "# normalize the dataset\n",
    "scaler = MinMaxScaler(feature_range=(0, 1)) #Also try QuantileTransformer\n",
    "dataset = scaler.fit_transform(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "246198c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.687900Z",
     "iopub.status.busy": "2022-05-23T11:02:30.687628Z",
     "iopub.status.idle": "2022-05-23T11:02:30.694802Z",
     "shell.execute_reply": "2022-05-23T11:02:30.693339Z"
    },
    "papermill": {
     "duration": 0.028124,
     "end_time": "2022-05-23T11:02:30.697301",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.669177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#We cannot use random way of splitting dataset into train and test as\n",
    "#the sequence of events is important for time series.\n",
    "#So let us take first 60% values for train and the remaining 1/3 for testing\n",
    "\n",
    "\n",
    "# split into train and test sets\n",
    "\n",
    "\n",
    "train_size = int(len(dataset) * 0.70)\n",
    "test_size = len(dataset) - train_size - int(len(dataset) * 0.15)\n",
    "val_size = len(dataset) - train_size - test_size\n",
    "\n",
    "train = dataset[0:train_size]\n",
    "val = dataset[train_size:train_size+val_size]\n",
    "test = dataset[train_size+val_size:len(dataset)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b7f4a560",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.732377Z",
     "iopub.status.busy": "2022-05-23T11:02:30.732134Z",
     "iopub.status.idle": "2022-05-23T11:02:30.738385Z",
     "shell.execute_reply": "2022-05-23T11:02:30.737202Z"
    },
    "papermill": {
     "duration": 0.02572,
     "end_time": "2022-05-23T11:02:30.739932",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.714212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def to_sequences(dataset, seq_size=1):\n",
    "    x = []\n",
    "    y = []\n",
    "\n",
    "    for i in range(len(dataset)-seq_size):\n",
    "        #print(i)\n",
    "        window = dataset[i:(i+seq_size), 0]\n",
    "        x.append(window)\n",
    "        y.append(dataset[i+seq_size, 0])\n",
    "        \n",
    "    return np.array(x),np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6be470cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.776581Z",
     "iopub.status.busy": "2022-05-23T11:02:30.776052Z",
     "iopub.status.idle": "2022-05-23T11:02:30.779239Z",
     "shell.execute_reply": "2022-05-23T11:02:30.778736Z"
    },
    "papermill": {
     "duration": 0.024282,
     "end_time": "2022-05-23T11:02:30.781190",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.756908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "seq_size = 64  # Number of time steps to look back \n",
    "#Larger sequences (look further back) may improve forecasting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a881acbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:30.818897Z",
     "iopub.status.busy": "2022-05-23T11:02:30.818600Z",
     "iopub.status.idle": "2022-05-23T11:02:31.598485Z",
     "shell.execute_reply": "2022-05-23T11:02:31.597667Z"
    },
    "papermill": {
     "duration": 0.802456,
     "end_time": "2022-05-23T11:02:31.601124",
     "exception": false,
     "start_time": "2022-05-23T11:02:30.798668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trainX, trainY = to_sequences(train, seq_size)\n",
    "valX, valY = to_sequences(val, seq_size)\n",
    "testX, testY = to_sequences(test, seq_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e260ef59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:31.654363Z",
     "iopub.status.busy": "2022-05-23T11:02:31.654126Z",
     "iopub.status.idle": "2022-05-23T11:02:31.660371Z",
     "shell.execute_reply": "2022-05-23T11:02:31.659610Z"
    },
    "papermill": {
     "duration": 0.035539,
     "end_time": "2022-05-23T11:02:31.662825",
     "exception": false,
     "start_time": "2022-05-23T11:02:31.627286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of training set: (316048, 64)\n",
      "Shape of val set: (67674, 64)\n",
      "Shape of test set: (67675, 64)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape of training set: {}\".format(trainX.shape))\n",
    "print(\"Shape of val set: {}\".format(valX.shape))\n",
    "print(\"Shape of test set: {}\".format(testX.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c0c1451",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:31.716186Z",
     "iopub.status.busy": "2022-05-23T11:02:31.715940Z",
     "iopub.status.idle": "2022-05-23T11:02:31.828717Z",
     "shell.execute_reply": "2022-05-23T11:02:31.827674Z"
    },
    "papermill": {
     "duration": 0.142304,
     "end_time": "2022-05-23T11:02:31.831305",
     "exception": false,
     "start_time": "2022-05-23T11:02:31.689001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Build deep model...\n",
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 64)                4160      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1)                 65        \n",
      "=================================================================\n",
      "Total params: 4,225\n",
      "Trainable params: 4,225\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-23 11:02:31.750876: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.\n"
     ]
    }
   ],
   "source": [
    "#Input dimensions are... (N x seq_size)\n",
    "print('Build deep model...')\n",
    "# create and fit dense model\n",
    "model = Sequential()\n",
    "model.add(Dense(64, input_dim=seq_size, activation='relu')) #12\n",
    "\n",
    "model.add(Dense(1))\n",
    "model.compile(loss='mse', optimizer='adam', metrics = ['mse'])\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "38052b6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:31.887623Z",
     "iopub.status.busy": "2022-05-23T11:02:31.887392Z",
     "iopub.status.idle": "2022-05-23T11:02:31.891968Z",
     "shell.execute_reply": "2022-05-23T11:02:31.891087Z"
    },
    "papermill": {
     "duration": 0.034705,
     "end_time": "2022-05-23T11:02:31.893773",
     "exception": false,
     "start_time": "2022-05-23T11:02:31.859068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "earlyStop = EarlyStopping(monitor='val_loss', min_delta=1e-3, patience=4, verbose=1, mode='auto', restore_best_weights=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "33a973a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:02:31.949441Z",
     "iopub.status.busy": "2022-05-23T11:02:31.949102Z",
     "iopub.status.idle": "2022-05-23T11:04:02.637499Z",
     "shell.execute_reply": "2022-05-23T11:04:02.635831Z"
    },
    "papermill": {
     "duration": 90.718858,
     "end_time": "2022-05-23T11:04:02.639740",
     "exception": false,
     "start_time": "2022-05-23T11:02:31.920882",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-23 11:02:32.053588: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "9877/9877 - 19s - loss: 6.1711e-04 - mse: 6.1711e-04 - val_loss: 5.0801e-04 - val_mse: 5.0801e-04\n",
      "Epoch 2/20\n",
      "9877/9877 - 18s - loss: 4.1510e-04 - mse: 4.1510e-04 - val_loss: 5.0361e-04 - val_mse: 5.0361e-04\n",
      "Epoch 3/20\n",
      "9877/9877 - 18s - loss: 3.9197e-04 - mse: 3.9197e-04 - val_loss: 5.1292e-04 - val_mse: 5.1292e-04\n",
      "Epoch 4/20\n",
      "9877/9877 - 18s - loss: 3.7305e-04 - mse: 3.7305e-04 - val_loss: 4.8242e-04 - val_mse: 4.8242e-04\n",
      "Epoch 5/20\n",
      "9877/9877 - 18s - loss: 3.6121e-04 - mse: 3.6121e-04 - val_loss: 6.5662e-04 - val_mse: 6.5662e-04\n",
      "Restoring model weights from the end of the best epoch.\n",
      "Epoch 00005: early stopping\n",
      "The time of execution of above program is : 90.68040680885315\n"
     ]
    }
   ],
   "source": [
    "# program to compute the time\n",
    "# of execution of any python code\n",
    "import time\n",
    "\n",
    "# we initialize the variable start\n",
    "# to store the starting time of\n",
    "# execution of program\n",
    "start = time.time()\n",
    "\n",
    "\n",
    "history = model.fit(trainX, trainY, validation_data=(valX, valY),\n",
    "          verbose=2, epochs=20, callbacks = [earlyStop])\n",
    "\n",
    "# now we have initialized the variable\n",
    "# end to store the ending time after\n",
    "# execution of program\n",
    "end = time.time()\n",
    "\n",
    "# difference of start and end variables\n",
    "# gives the time of execution of the\n",
    "# program in between\n",
    "print(\"The time of execution of above program is :\", end-start)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3cc927db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:04:02.705946Z",
     "iopub.status.busy": "2022-05-23T11:04:02.705569Z",
     "iopub.status.idle": "2022-05-23T11:05:08.586413Z",
     "shell.execute_reply": "2022-05-23T11:05:08.585325Z"
    },
    "papermill": {
     "duration": 65.916789,
     "end_time": "2022-05-23T11:05:08.588801",
     "exception": false,
     "start_time": "2022-05-23T11:04:02.672012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# make predictions\n",
    "\n",
    "trainPredict = model.predict(trainX)\n",
    "valPredict = model.predict(valX)\n",
    "testPredict = model.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8467d8e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:05:08.657140Z",
     "iopub.status.busy": "2022-05-23T11:05:08.656363Z",
     "iopub.status.idle": "2022-05-23T11:05:08.663899Z",
     "shell.execute_reply": "2022-05-23T11:05:08.662839Z"
    },
    "papermill": {
     "duration": 0.044433,
     "end_time": "2022-05-23T11:05:08.666264",
     "exception": false,
     "start_time": "2022-05-23T11:05:08.621831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# invert predictions back to prescaled values\n",
    "#This is to compare with original input values\n",
    "#SInce we used minmaxscaler we can now use scaler.inverse_transform\n",
    "#to invert the transformation.\n",
    "trainPredict = scaler.inverse_transform(trainPredict)\n",
    "trainY = scaler.inverse_transform([trainY])\n",
    "testPredict = scaler.inverse_transform(testPredict)\n",
    "testY = scaler.inverse_transform([testY])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2f9a021b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:05:08.734244Z",
     "iopub.status.busy": "2022-05-23T11:05:08.733790Z",
     "iopub.status.idle": "2022-05-23T11:05:08.743777Z",
     "shell.execute_reply": "2022-05-23T11:05:08.742217Z"
    },
    "papermill": {
     "duration": 0.046986,
     "end_time": "2022-05-23T11:05:08.746317",
     "exception": false,
     "start_time": "2022-05-23T11:05:08.699331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Score: 1.16 RMSE\n"
     ]
    }
   ],
   "source": [
    "# calculate root mean squared error\n",
    "trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))\n",
    "print('Train Score: %.2f RMSE' % (trainScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9ebfa0c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:05:08.814822Z",
     "iopub.status.busy": "2022-05-23T11:05:08.814560Z",
     "iopub.status.idle": "2022-05-23T11:05:08.821943Z",
     "shell.execute_reply": "2022-05-23T11:05:08.820189Z"
    },
    "papermill": {
     "duration": 0.045017,
     "end_time": "2022-05-23T11:05:08.824506",
     "exception": false,
     "start_time": "2022-05-23T11:05:08.779489",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Score: 1.28 RMSE\n"
     ]
    }
   ],
   "source": [
    "testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))\n",
    "print('Test Score: %.2f RMSE' % (testScore))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7bcd2d59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-05-23T11:05:08.893712Z",
     "iopub.status.busy": "2022-05-23T11:05:08.893426Z",
     "iopub.status.idle": "2022-05-23T11:05:09.106884Z",
     "shell.execute_reply": "2022-05-23T11:05:09.105986Z"
    },
    "papermill": {
     "duration": 0.25139,
     "end_time": "2022-05-23T11:05:09.109723",
     "exception": false,
     "start_time": "2022-05-23T11:05:08.858333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train loss', 'validation loss'], loc='upper right')\n",
    "plt.rcParams[\"figure.figsize\"] = [16,9]\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff8ae5e4",
   "metadata": {
    "papermill": {
     "duration": 0.034098,
     "end_time": "2022-05-23T11:05:09.178344",
     "exception": false,
     "start_time": "2022-05-23T11:05:09.144246",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 178.694346,
   "end_time": "2022-05-23T11:05:12.424867",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-05-23T11:02:13.730521",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
